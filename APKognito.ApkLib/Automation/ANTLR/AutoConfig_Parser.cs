//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /mnt/d/AppsIWillNeverFinish/APKognito/APKognito.ApkLib/Automation/ANTLR/AutoConfig_Parser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AutoConfig_Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Semi=1, Colon=2, At=3, LeftBrace=4, RightBrace=5, Identifier=6, SingleLineComment=7, 
		Meta=8, StringConstant=9, Word=10, Number=11, Newline=12, Whitespace=13, 
		UnexpectedCharacter=14;
	public const int
		RULE_document = 0, RULE_metadata = 1, RULE_section = 2, RULE_line = 3, 
		RULE_argument = 4, RULE_sectionDeclaration = 5, RULE_metaSetter = 6;
	public static readonly string[] ruleNames = {
		"document", "metadata", "section", "line", "argument", "sectionDeclaration", 
		"metaSetter"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "':'", "'@'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Semi", "Colon", "At", "LeftBrace", "RightBrace", "Identifier", 
		"SingleLineComment", "Meta", "StringConstant", "Word", "Number", "Newline", 
		"Whitespace", "UnexpectedCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AutoConfig_Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AutoConfig_Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AutoConfig_Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AutoConfig_Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AutoConfig_Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SectionContext[] section() {
			return GetRuleContexts<SectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SectionContext section(int i) {
			return GetRuleContext<SectionContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoConfig_ParserVisitor<TResult> typedVisitor = visitor as IAutoConfig_ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Meta) {
				{
				State = 14;
				metadata();
				}
			}

			State = 20;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==At) {
				{
				{
				State = 17;
				section();
				}
				}
				State = 22;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 23;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetadataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Meta() { return GetToken(AutoConfig_Parser.Meta, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(AutoConfig_Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(AutoConfig_Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MetaSetterContext[] metaSetter() {
			return GetRuleContexts<MetaSetterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetaSetterContext metaSetter(int i) {
			return GetRuleContext<MetaSetterContext>(i);
		}
		public MetadataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metadata; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoConfig_ParserVisitor<TResult> typedVisitor = visitor as IAutoConfig_ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetadata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetadataContext metadata() {
		MetadataContext _localctx = new MetadataContext(Context, State);
		EnterRule(_localctx, 2, RULE_metadata);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			Match(Meta);
			State = 26;
			Match(LeftBrace);
			State = 30;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Identifier) {
				{
				{
				State = 27;
				metaSetter();
				}
				}
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 33;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SectionDeclarationContext sectionDeclaration() {
			return GetRuleContext<SectionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public SectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoConfig_ParserVisitor<TResult> typedVisitor = visitor as IAutoConfig_ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SectionContext section() {
		SectionContext _localctx = new SectionContext(Context, State);
		EnterRule(_localctx, 4, RULE_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			sectionDeclaration();
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Identifier) {
				{
				{
				State = 36;
				line();
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AutoConfig_Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoConfig_ParserVisitor<TResult> typedVisitor = visitor as IAutoConfig_ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 6, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			Match(Identifier);
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3584L) != 0)) {
				{
				{
				State = 43;
				argument();
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringConstant() { return GetToken(AutoConfig_Parser.StringConstant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(AutoConfig_Parser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Word() { return GetToken(AutoConfig_Parser.Word, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoConfig_ParserVisitor<TResult> typedVisitor = visitor as IAutoConfig_ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 8, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3584L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At() { return GetToken(AutoConfig_Parser.At, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AutoConfig_Parser.Identifier, 0); }
		public SectionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sectionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoConfig_ParserVisitor<TResult> typedVisitor = visitor as IAutoConfig_ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSectionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SectionDeclarationContext sectionDeclaration() {
		SectionDeclarationContext _localctx = new SectionDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_sectionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(At);
			State = 52;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetaSetterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(AutoConfig_Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(AutoConfig_Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public MetaSetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metaSetter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAutoConfig_ParserVisitor<TResult> typedVisitor = visitor as IAutoConfig_ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetaSetter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetaSetterContext metaSetter() {
		MetaSetterContext _localctx = new MetaSetterContext(Context, State);
		EnterRule(_localctx, 12, RULE_metaSetter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(Identifier);
			State = 55;
			Match(Colon);
			State = 56;
			argument();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,14,59,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,1,0,
		3,0,16,8,0,1,0,5,0,19,8,0,10,0,12,0,22,9,0,1,0,1,0,1,1,1,1,1,1,5,1,29,
		8,1,10,1,12,1,32,9,1,1,1,1,1,1,2,1,2,5,2,38,8,2,10,2,12,2,41,9,2,1,3,1,
		3,5,3,45,8,3,10,3,12,3,48,9,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,
		0,0,7,0,2,4,6,8,10,12,0,1,1,0,9,11,56,0,15,1,0,0,0,2,25,1,0,0,0,4,35,1,
		0,0,0,6,42,1,0,0,0,8,49,1,0,0,0,10,51,1,0,0,0,12,54,1,0,0,0,14,16,3,2,
		1,0,15,14,1,0,0,0,15,16,1,0,0,0,16,20,1,0,0,0,17,19,3,4,2,0,18,17,1,0,
		0,0,19,22,1,0,0,0,20,18,1,0,0,0,20,21,1,0,0,0,21,23,1,0,0,0,22,20,1,0,
		0,0,23,24,5,0,0,1,24,1,1,0,0,0,25,26,5,8,0,0,26,30,5,4,0,0,27,29,3,12,
		6,0,28,27,1,0,0,0,29,32,1,0,0,0,30,28,1,0,0,0,30,31,1,0,0,0,31,33,1,0,
		0,0,32,30,1,0,0,0,33,34,5,5,0,0,34,3,1,0,0,0,35,39,3,10,5,0,36,38,3,6,
		3,0,37,36,1,0,0,0,38,41,1,0,0,0,39,37,1,0,0,0,39,40,1,0,0,0,40,5,1,0,0,
		0,41,39,1,0,0,0,42,46,5,6,0,0,43,45,3,8,4,0,44,43,1,0,0,0,45,48,1,0,0,
		0,46,44,1,0,0,0,46,47,1,0,0,0,47,7,1,0,0,0,48,46,1,0,0,0,49,50,7,0,0,0,
		50,9,1,0,0,0,51,52,5,3,0,0,52,53,5,6,0,0,53,11,1,0,0,0,54,55,5,6,0,0,55,
		56,5,2,0,0,56,57,3,8,4,0,57,13,1,0,0,0,5,15,20,30,39,46
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
